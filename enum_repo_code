<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>MAYUSO ENUMERATION REPORT</title>
  <script src="https://cdn.jsdelivr.net/npm/dompurify@2.4.1/dist/purify.min.js"></script>
  <style>
    :root {
      --primary-color: #B80F11;
      --secondary-color: #CCCCCC;
      --background-dark: #1A1A1A;
      --background-light: #F0F0F0;
      --text-dark: #FFFFFF;
      --text-light: #000000;
      --border-dark: #3B3B3B;
      --border-light: #CCCCCC;
    }

    body {
      background-color: #1A1A1A;
      font-family: Arial, sans-serif;
      color: var(--text-dark);
      margin: 0;
      padding: 12px;
      box-sizing: border-box;
      transition: all 0.3s ease;
    }

    body.light {
      background-color: #F0F0F0;
      color: var(--text-light);
    }

    .pentester-hub {
      background-color: transparent;
      border: none;
      padding: 12px;
      max-width: 900px;
      margin: 0 auto;
      box-sizing: border-box;
    }

    body.light .pentester-hub {
      background-color: transparent;
      border: none;
    }

    h2, h3 {
      margin: 0 0 8px 0;
      font-size: 18px;
      color: var(--primary-color);
    }

    h3 {
      font-size: 14px;
      margin: 6px 0;
    }

    .section {
      background-color: #333333;
      border-radius: 5px;
      padding: 8px;
      margin: 12px 0;
    }

    body.light .section {
      background-color: #E0E0E0;
    }

    .device-block {
      border: 2px solid #666666;
      border-radius: 5px;
      padding: 8px;
      margin: 12px 0;
      background-color: #2A2A2A;
    }

    body.light .device-block {
      background-color: #F5F5F5;
    }

    .device-name {
      font-size: 16px;
      font-weight: bold;
      color: var(--text-dark);
      background-color: transparent;
      border: none;
      border-bottom: 1px solid #666666;
      padding: 4px 0;
      margin-bottom: 8px;
      width: 100%;
    }

    body.light .device-name {
      color: var(--text-light);
    }

    .device-name:focus {
      outline: none;
      border-bottom: 1px solid var(--primary-color);
    }

    .input-group {
      display: grid;
      grid-template-columns: 1fr;
      gap: 6px;
    }

    .input-group.network-double {
      grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
    }

    .input-group.import-group {
      grid-template-columns: 1fr 1fr;
    }

    .input-group label {
      font-size: 9px;
      color: #E0E0E0;
      font-weight: bold;
      margin-bottom: 2px;
    }

    body.light .input-group label {
      color: #333333;
    }

    input, select, textarea, button {
      background-color: #444444;
      border: 1px solid var(--secondary-color);
      color: var(--text-dark);
      padding: 5px;
      margin: 3px 0;
      border-radius: 4px;
      font-size: 11px;
      width: 100%;
      box-sizing: border-box;
    }

    body.light input, body.light select, body.light textarea, body.light button {
      background-color: #FFFFFF;
      color: var(--text-light);
    }

    .add-button {
      width: 33%;
    }

    textarea {
      resize: vertical;
      min-height: 50px;
      font-family: 'Courier New', monospace;
    }

    .ports-table, .creds-table, .vulns-table, .subdomains-table {
      width: 100%;
      border-collapse: collapse;
      margin: 6px 0;
    }

    .ports-table th, .ports-table td, .creds-table th, .creds-table td, 
    .vulns-table th, .vulns-table td, .subdomains-table th, .subdomains-table td {
      border: 1px solid #666666;
      padding: 5px;
      text-align: left;
      font-family: 'Courier New', monospace;
      font-size: 11px;
    }

    .ports-table th, .creds-table th, .vulns-table th, .subdomains-table th {
      background-color: var(--background-dark);
    }

    body.light .ports-table th, body.light .creds-table th, 
    body.light .vulns-table th, body.light .subdomains-table th {
      background-color: #FFFFFF;
    }

    .row-completed {
      background-color: rgba(173, 19, 21, 0.2);
    }

    .delete-row, .delete-device {
      background-color: #666666;
      padding: 4px;
      font-size: 10px;
      text-align: center;
    }

    .delete-row {
      width: 24px;
    }

    .delete-device {
      width: 120px;
      padding: 6px 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 6px;
    }

    .delete-row:hover, .delete-device:hover {
      background-color: #888888;
    }

    button {
      background-color: var(--primary-color);
      border: none;
      padding: 6px;
      cursor: pointer;
      font-size: 12px;
      border-radius: 4px;
    }

    button:hover {
      background-color: #D81B1D;
    }

    .add-device-section {
      background-color: #2A2A2A;
      border: 1px solid #666666;
      border-radius: 5px;
      padding: 8px;
      margin-top: 12px;
      text-align: center;
    }

    body.light .add-device-section {
      background-color: #F5F5F5;
    }

    .add-device-section button {
      background-color: var(--secondary-color);
      color: var(--background-dark);
      border: none;
      padding: 8px 16px;
      cursor: pointer;
      font-size: 12px;
      border-radius: 4px;
    }

    .add-device-section button:hover {
      background-color: #DDDDDD;
    }

    .note {
      font-size: 9px;
      color: #E0E0E0;
      margin: 6px 0;
    }

    body.light .note {
      color: #333333;
    }

    #notes {
      min-height: 150px;
    }

    .error-message {
      position: fixed;
      top: 10px;
      right: 10px;
      background-color: #FF4444;
      color: #FFFFFF;
      padding: 10px;
      border-radius: 5px;
      z-index: 1000;
      max-width: 300px;
    }

    .theme-selector-container {
      margin: 10px 0;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .theme-selector {
      width: 150px;
    }

    @media (max-width: 600px) {
      .pentester-hub {
        padding: 8px;
      }
      .input-group, .input-group.network-double, .input-group.import-group {
        grid-template-columns: 1fr;
      }
      .input-group label {
        font-size: 8px;
      }
      .ports-table th, .ports-table td, .creds-table th, .creds-table td,
      .vulns-table th, .vulns-table td, .subdomains-table th, .subdomains-table td {
        font-size: 10px;
        padding: 4px;
      }
      input, select, textarea, button {
        font-size: 10px;
        padding: 4px;
      }
      .delete-row {
        width: 20px;
        padding: 3px;
      }
      .delete-device {
        width: 100px;
        padding: 4px 8px;
        font-size: 9px;
      }
      .device-name {
        font-size: 14px;
      }
      .add-device-section {
        padding: 6px;
        margin-top: 8px;
      }
      .add-device-section button {
        padding: 6px 12px;
        font-size: 10px;
      }
      .add-button {
        width: 100%;
      }
      #notes {
        min-height: 120px;
      }
      .theme-selector {
        width: 100%;
      }
    }
  </style>
</head>
<body>
  <div class="pentester-hub">
    <h2 role="heading" aria-level="2">üìï MAYUSO ENUMERATION REPORT</h2>
    <div class="theme-selector-container">
      <label for="themeSelector">Tema:</label>
      <select class="theme-selector" id="themeSelector" onchange="changeTheme()" aria-label="Selector de tema">
        <option value="dark">Oscuro</option>
        <option value="light">Claro</option>
      </select>
    </div>
    <div class="section">
      <h3>üíª Entorno</h3>
      <div class="input-group network-double">
        <div>
          <label for="ownPrivateIp">üñ•Ô∏è IP Privada propia</label>
          <input type="text" id="ownPrivateIp" placeholder="ej. 192.168.1.100">
        </div>
        <div>
          <label for="ownPublicIp">üåê IP P√∫blica propia</label>
          <input type="text" id="ownPublicIp" placeholder="ej. 203.0.113.1">
        </div>
      </div>
      <div class="input-group network-double">
        <div>
          <label for="networkName">‚ôí Nombre de la red</label>
          <input type="text" id="networkName" placeholder="ej. eth0">
        </div>
        <div>
          <label for="networkRange">‚ôí Rango de red</label>
          <input type="text" id="networkRange" placeholder="ej. 192.168.1.0/24">
        </div>
      </div>
    </div>
    <div class="section">
      <h3>üñ•Ô∏è M√°quinas Objetivo</h3>
      <div id="devicesContainer"></div>
      <div class="add-device-section">
        <button onclick="addDevice()" aria-label="A√±adir nueva m√°quina">üíª A√±adir M√°quina Nueva</button>
      </div>
    </div>
    <div class="section">
      <h3>üìù Notas Adicionales (observaciones, l√≠neas de c√≥digo utilizadas, payloads...)</h3>
      <textarea id="notes" placeholder="Anotaciones adicionales del ejercicio"></textarea>
    </div>
    <div class="section">
      <div class="input-group import-group">
        <input type="file" id="importFile" accept=".json">
        <button onclick="importData()">üì§ Importar JSON</button>
      </div>
      <button onclick="exportData()">üìí Exportar a JSON</button>
      <button onclick="exportToHTML()">üåê Exportar a HTML</button>
      <button onclick="clearData()">üóëÔ∏è Limpiar Datos</button>
    </div>
    <p class="note">Nota: Esta herramienta es para fines educativos. √ösala solo con permiso expl√≠cito del propietario del sistema.</p>
  </div>

  <script>
    let deviceCounter = 0;

    function showError(message) {
      console.log('Error:', message);
      const errorDiv = document.createElement('div');
      errorDiv.className = 'error-message';
      errorDiv.textContent = message;
      document.body.appendChild(errorDiv);
      setTimeout(() => errorDiv.remove(), 5000);
    }

    function changeTheme() {
      const theme = document.getElementById('themeSelector').value;
      document.body.className = theme;
      localStorage.setItem('theme', theme);
    }

    function addPortRow(deviceId) {
      const tbody = document.getElementById(`portsBody_${deviceId}`);
      if (!tbody) {
        console.error(`No se encontr√≥ portsBody_${deviceId}`);
        return;
      }
      const row = document.createElement('tr');
      row.innerHTML = `
        <td><input type="text" placeholder="ej. 80"></td>
        <td><select>
          <option value="TCP">TCP</option>
          <option value="UDP">UDP</option>
          <option value="SCTP">SCTP</option>
        </select></td>
        <td><input type="text" placeholder="ej. HTTP"></td>
        <td><input type="text" placeholder="ej. Apache 2.4.41"></td>
        <td><button class="delete-row" onclick="deleteRow(event)">üóëÔ∏è</button></td>
      `;
      tbody.appendChild(row);
      attachInputListeners(row);
      saveData();
    }

    function addCredRow(deviceId) {
      const tbody = document.getElementById(`credsBody_${deviceId}`);
      if (!tbody) {
        console.error(`No se encontr√≥ credsBody_${deviceId}`);
        return;
      }
      const row = document.createElement('tr');
      row.innerHTML = `
        <td><input type="text" placeholder="ej. admin"></td>
        <td><input type="text" placeholder="ej. password123"></td>
        <td><input type="text" placeholder="ej. JWT_abc123"></td>
        <td><input type="text" placeholder="ej. $2a$10$..."></td>
        <td><button class="delete-row" onclick="deleteRow(event)">üóëÔ∏è</button></td>
      `;
      tbody.appendChild(row);
      attachInputListeners(row);
      saveData();
    }

    function addVulnRow(deviceId) {
      const tbody = document.getElementById(`vulnsBody_${deviceId}`);
      if (!tbody) {
        console.error(`No se encontr√≥ vulnsBody_${deviceId}`);
        return;
      }
      const row = document.createElement('tr');
      row.innerHTML = `
        <td><input type="text" placeholder="ej. XSS"></td>
        <td><input type="text" placeholder="ej. CVE-2021-1234"></td>
        <td><input type="text" placeholder="ej. Inyecci√≥n en formulario"></td>
        <td><button class="delete-row" onclick="deleteRow(event)">üóëÔ∏è</button></td>
      `;
      tbody.appendChild(row);
      attachInputListeners(row);
      saveData();
    }

    function addSubdomainRow(deviceId) {
      const tbody = document.getElementById(`subdomainsBody_${deviceId}`);
      if (!tbody) {
        console.error(`No se encontr√≥ subdomainsBody_${deviceId}`);
        return;
      }
      const row = document.createElement('tr');
      row.innerHTML = `
        <td><input type="text" placeholder="ej. sub1.example.com"></td>
        <td><input type="text" placeholder="ej. Servidor web principal"></td>
        <td><button class="delete-row" onclick="deleteRow(event)">üóëÔ∏è</button></td>
      `;
      tbody.appendChild(row);
      attachInputListeners(row);
      saveData();
    }

    function addDevice() {
      const container = document.getElementById('devicesContainer');
      const deviceId = deviceCounter++;
      const deviceBlock = document.createElement('div');
      deviceBlock.className = 'device-block';
      deviceBlock.dataset.deviceId = deviceId;
      deviceBlock.innerHTML = `
        <input type="text" id="deviceName_${deviceId}" class="device-name" value="M√°quina ${deviceId + 1}" placeholder="Nombre del equipo">
        <div class="input-group network-double">
          <div>
            <label for="deviceIp_${deviceId}">üíª IP</label>
            <input type="text" id="deviceIp_${deviceId}" placeholder="ej. 192.168.1.102">
          </div>
          <div>
            <label for="deviceDomain_${deviceId}">üåê Dominio</label>
            <input type="text" id="deviceDomain_${deviceId}" placeholder="ej. example.com">
          </div>
        </div>
        <div class="input-group network-double">
          <div>
            <label for="deviceMac_${deviceId}">üìç MAC-Address</label>
            <input type="text" id="deviceMac_${deviceId}" placeholder="ej. 00:1A:2B:3C:4D:5E">
          </div>
          <div>
            <label for="deviceOs_${deviceId}">‚öôÔ∏è Sistema Operativo</label>
            <input type="text" id="deviceOs_${deviceId}" placeholder="ej. Linux 5.4">
          </div>
        </div>
        <div class="input-group">
          <h3>üõë Puertos Abiertos</h3>
          <table class="ports-table">
            <thead>
              <tr>
                <th>Puerto</th>
                <th>Protocolo</th>
                <th>Servicio</th>
                <th>Versi√≥n</th>
                <th></th>
              </tr>
            </thead>
            <tbody id="portsBody_${deviceId}"></tbody>
          </table>
          <button class="add-button" onclick="addPortRow(${deviceId})">üõë A√±adir Puerto</button>
        </div>
        <div class="input-group">
          <h3>üåê Subdominios descubiertos</h3>
          <table class="subdomains-table">
            <thead>
              <tr>
                <th>Subdominio</th>
                <th>Descripci√≥n</th>
                <th></th>
              </tr>
            </thead>
            <tbody id="subdomainsBody_${deviceId}"></tbody>
          </table>
          <button class="add-button" onclick="addSubdomainRow(${deviceId})">üåê A√±adir Subdominio</button>
        </div>
        <div class="input-group">
          <h3>ü™™ Credenciales obtenidas</h3>
          <table class="creds-table">
            <thead>
              <tr>
                <th>Usuario</th>
                <th>Contrase√±a</th>
                <th>Token</th>
                <th>Hash</th>
                <th></th>
              </tr>
            </thead>
            <tbody id="credsBody_${deviceId}"></tbody>
          </table>
          <button class="add-button" onclick="addCredRow(${deviceId})">ü™™ A√±adir Credencial</button>
        </div>
        <div class="input-group">
          <h3>‚ö†Ô∏è Vulnerabilidades detectadas</h3>
          <table class="vulns-table">
            <thead>
              <tr>
                <th>Nombre Vulnerabilidad</th>
                <th>CVE</th>
                <th>Descripci√≥n</th>
                <th></th>
              </tr>
            </thead>
            <tbody id="vulnsBody_${deviceId}"></tbody>
          </table>
          <button class="add-button" onclick="addVulnRow(${deviceId})">‚ö†Ô∏è A√±adir Vulnerabilidad</button>
        </div>
        <button class="delete-device" onclick="deleteDevice(${deviceId})">üóëÔ∏è Borrar M√°quina</button>
      `;
      container.appendChild(deviceBlock);
      attachDeviceInputListeners(deviceId);
      saveData();
    }

    function deleteRow(event) {
      event.preventDefault();
      const row = event.target.closest('tr');
      row.remove();
      saveData();
    }

    function deleteDevice(deviceId) {
      event.preventDefault();
      const container = document.getElementById('devicesContainer');
      const deviceBlock = document.querySelector(`.device-block[data-device-id="${deviceId}"]`);
      if (deviceBlock) {
        deviceBlock.remove();
        saveData();
      }
    }

    function attachInputListeners(row) {
      const inputs = row.querySelectorAll('input, select');
      inputs.forEach(input => {
        input.addEventListener('input', () => {
          const allFilled = Array.from(inputs).every(inp => inp.value.trim() !== '');
          row.classList.toggle('row-completed', allFilled);
          saveData();
        });
      });
    }

    function attachDeviceInputListeners(deviceId) {
      const deviceBlock = document.querySelector(`.device-block[data-device-id="${deviceId}"]`);
      if (!deviceBlock) {
        console.error(`No se encontr√≥ device-block con ID ${deviceId}`);
        return;
      }
      const inputs = deviceBlock.querySelectorAll('input, select');
      inputs.forEach(input => input.addEventListener('input', saveData));
      document.querySelectorAll(`#portsBody_${deviceId} tr, #credsBody_${deviceId} tr, #vulnsBody_${deviceId} tr, #subdomainsBody_${deviceId} tr`)
        .forEach(attachInputListeners);
    }

    function validateIp(ip) {
      if (!ip) return true;
      return /^(\d{1,3}\.){3}\d{1,3}$/.test(ip) && ip.split('.').every(num => num >= 0 && num <= 255);
    }

    function validateNetworkRange(range) {
      if (!range) return true;
      return /^(\d{1,3}\.){3}\d{1,3}\/\d{1,2}$/.test(range) && 
             range.split('/')[0].split('.').every(num => num >= 0 && num <= 255) &&
             range.split('/')[1] >= 0 && range.split('/')[1] <= 32;
    }

    function validatePort(port) {
      if (!port) return true;
      return /^\d+$/.test(port) && port >= 1 && port <= 65535;
    }

    function validateMacAddress(mac) {
      if (!mac) return true;
      return /^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/.test(mac);
    }

    function validateCve(cve) {
      if (!cve) return true;
      return /^CVE-\d{4}-\d{4,}$/.test(cve);
    }

    function validateSubdomain(subdomain) {
      if (!subdomain) return true;
      return /^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(subdomain);
    }

    function validateData(data) {
      const errors = [];

      if (!data || !data.preliminaryInfo || !data.devices) {
        errors.push('Datos incompletos o estructura inv√°lida.');
        return errors;
      }

      if (!validateIp(data.preliminaryInfo.ownPrivateIp)) {
        errors.push('IP Privada propia inv√°lida. Usa el formato 192.168.1.100.');
      }
      if (!validateIp(data.preliminaryInfo.ownPublicIp)) {
        errors.push('IP P√∫blica propia inv√°lida. Usa el formato 203.0.113.1.');
      }
      if (!validateNetworkRange(data.preliminaryInfo.networkRange)) {
        errors.push('Rango de red inv√°lido. Usa el formato 192.168.1.0/24.');
      }

      data.devices.forEach((device, index) => {
        if (!validateIp(device.ip)) {
          errors.push(`IP de equipo inv√°lida en "${device.name || `M√°quina ${index + 1}`}": ${device.ip || 'vac√≠o'}.`);
        }
        if (!validateSubdomain(device.domain)) {
          errors.push(`Dominio de equipo inv√°lido en "${device.name || `M√°quina ${index + 1}`}": ${device.domain || 'vac√≠o'}.`);
        }
        if (!validateMacAddress(device.macAddress)) {
          errors.push(`MAC-Address inv√°lida en "${device.name || `M√°quina ${index + 1}`}": ${device.macAddress || 'vac√≠o'}.`);
        }
        device.ports.forEach((port, portIndex) => {
          if (!validatePort(port.port)) {
            errors.push(`Puerto inv√°lido en "${device.name || `M√°quina ${index + 1}`}": ${port.port || 'vac√≠o'}.`);
          }
        });
        device.subdomains.forEach((sub, subIndex) => {
          if (!validateSubdomain(sub.subdomain)) {
            errors.push(`Subdominio inv√°lido en "${device.name || `M√°quina ${index + 1}`}": ${sub.subdomain || 'vac√≠o'}.`);
          }
        });
        device.vulnerabilities.forEach((vuln, vulnIndex) => {
          if (!validateCve(vuln.cve)) {
            errors.push(`CVE inv√°lido en "${device.name || `M√°quina ${index + 1}`}": ${vuln.cve || 'vac√≠o'}.`);
          }
        });
      });

      return errors;
    }

    function sanitizeInput(value) {
      return DOMPurify.sanitize(value);
    }

    function collectData() {
      const devices = Array.from(document.querySelectorAll('.device-block')).map(block => {
        const deviceId = block.dataset.deviceId;
        const deviceNameInput = document.getElementById(`deviceName_${deviceId}`);
        const deviceIpInput = document.getElementById(`deviceIp_${deviceId}`);
        const deviceDomainInput = document.getElementById(`deviceDomain_${deviceId}`);
        const deviceMacInput = document.getElementById(`deviceMac_${deviceId}`);
        const deviceOsInput = document.getElementById(`deviceOs_${deviceId}`);
        
        return {
          name: deviceNameInput ? sanitizeInput(deviceNameInput.value.trim()) || `M√°quina ${parseInt(deviceId) + 1}` : `M√°quina ${parseInt(deviceId) + 1}`,
          ip: deviceIpInput ? sanitizeInput(deviceIpInput.value.trim()) || '' : '',
          domain: deviceDomainInput ? sanitizeInput(deviceDomainInput.value.trim()) || '' : '',
          macAddress: deviceMacInput ? sanitizeInput(deviceMacInput.value.trim()) || '' : '',
          os: deviceOsInput ? sanitizeInput(deviceOsInput.value.trim()) || '' : '',
          ports: Array.from(document.querySelectorAll(`#portsBody_${deviceId} tr`)).map(row => ({
            port: row.cells[0].querySelector('input')?.value.trim() || '',
            protocol: row.cells[1].querySelector('select')?.value.trim() || '',
            service: row.cells[2].querySelector('input')?.value.trim() || '',
            version: row.cells[3].querySelector('input')?.value.trim() || ''
          })),
          subdomains: Array.from(document.querySelectorAll(`#subdomainsBody_${deviceId} tr`)).map(row => ({
            subdomain: row.cells[0].querySelector('input')?.value.trim() || '',
            description: row.cells[1].querySelector('input')?.value.trim() || ''
          })),
          credentials: Array.from(document.querySelectorAll(`#credsBody_${deviceId} tr`)).map(row => ({
            user: row.cells[0].querySelector('input')?.value.trim() || '',
            password: row.cells[1].querySelector('input')?.value.trim() || '',
            token: row.cells[2].querySelector('input')?.value.trim() || '',
            hash: row.cells[3].querySelector('input')?.value.trim() || ''
          })),
          vulnerabilities: Array.from(document.querySelectorAll(`#vulnsBody_${deviceId} tr`)).map(row => ({
            name: row.cells[0].querySelector('input')?.value.trim() || '',
            cve: row.cells[1].querySelector('input')?.value.trim() || '',
            description: row.cells[2].querySelector('input')?.value.trim() || ''
          }))
        };
      });

      const preliminaryInfo = {
        ownPrivateIp: document.getElementById('ownPrivateIp')?.value.trim() || '',
        ownPublicIp: document.getElementById('ownPublicIp')?.value.trim() || '',
        networkName: document.getElementById('networkName')?.value.trim() || '',
        networkRange: document.getElementById('networkRange')?.value.trim() || ''
      };

      const notes = document.getElementById('notes')?.value.trim() || '';

      return { preliminaryInfo, devices, notes };
    }

    function saveData() {
      try {
        const data = collectData();
        localStorage.setItem('pentesterHubData', JSON.stringify(data));
      } catch (e) {
        console.error('Error al guardar datos:', e);
        showError('Error al guardar datos: ' + e.message);
      }
    }

    function loadData() {
      try {
        const savedData = localStorage.getItem('pentesterHubData');
        if (!savedData) return;
        const data = JSON.parse(savedData);

        document.getElementById('ownPrivateIp').value = sanitizeInput(data.preliminaryInfo?.ownPrivateIp || '');
        document.getElementById('ownPublicIp').value = sanitizeInput(data.preliminaryInfo?.ownPublicIp || '');
        document.getElementById('networkName').value = sanitizeInput(data.preliminaryInfo?.networkName || '');
        document.getElementById('networkRange').value = sanitizeInput(data.preliminaryInfo?.networkRange || '');

        const container = document.getElementById('devicesContainer');
        container.innerHTML = '';
        deviceCounter = 0;
        (data.devices || []).forEach(device => {
          const deviceId = deviceCounter++;
          const deviceBlock = document.createElement('div');
          deviceBlock.className = 'device-block';
          deviceBlock.dataset.deviceId = deviceId;
          deviceBlock.innerHTML = `
            <input type="text" id="deviceName_${deviceId}" class="device-name" value="${sanitizeInput(device.name || `M√°quina ${deviceId + 1}`)}" placeholder="Nombre del equipo">
            <div class="input-group network-double">
              <div>
                <label for="deviceIp_${deviceId}">üíª IP</label>
                <input type="text" id="deviceIp_${deviceId}" value="${sanitizeInput(device.ip || '')}" placeholder="ej. 192.168.1.102">
              </div>
              <div>
                <label for="deviceDomain_${deviceId}">üåê Dominio</label>
                <input type="text" id="deviceDomain_${deviceId}" value="${sanitizeInput(device.domain || '')}" placeholder="ej. example.com">
              </div>
            </div>
            <div class="input-group network-double">
              <div>
                <label for="deviceMac_${deviceId}">üìç MAC-Address</label>
                <input type="text" id="deviceMac_${deviceId}" value="${sanitizeInput(device.macAddress || '')}" placeholder="ej. 00:1A:2B:3C:4D:5E">
              </div>
              <div>
                <label for="deviceOs_${deviceId}">‚öôÔ∏è Sistema Operativo</label>
                <input type="text" id="deviceOs_${deviceId}" value="${sanitizeInput(device.os || '')}" placeholder="ej. Linux 5.4">
              </div>
            </div>
            <div class="input-group">
              <h3>üõë Puertos Abiertos</h3>
              <table class="ports-table">
                <thead>
                  <tr>
                    <th>Puerto</th>
                    <th>Protocolo</th>
                    <th>Servicio</th>
                    <th>Versi√≥n</th>
                    <th></th>
                  </tr>
                </thead>
                <tbody id="portsBody_${deviceId}">
                  ${device.ports && device.ports.length > 0 ? device.ports.map(port => `
                    <tr>
                      <td><input type="text" value="${sanitizeInput(port.port || '')}" placeholder="ej. 80"></td>
                      <td><select>
                        <option value="TCP" ${port.protocol === 'TCP' ? 'selected' : ''}>TCP</option>
                        <option value="UDP" ${port.protocol === 'UDP' ? 'selected' : ''}>UDP</option>
                        <option value="SCTP" ${port.protocol === 'SCTP' ? 'selected' : ''}>SCTP</option>
                      </select></td>
                      <td><input type="text" value="${sanitizeInput(port.service || '')}" placeholder="ej. HTTP"></td>
                      <td><input type="text" value="${sanitizeInput(port.version || '')}" placeholder="ej. Apache 2.4.41"></td>
                      <td><button class="delete-row" onclick="deleteRow(event)">üóëÔ∏è</button></td>
                    </tr>
                  `).join('') : ''}
                </tbody>
              </table>
              <button class="add-button" onclick="addPortRow(${deviceId})">üõë A√±adir Puerto</button>
            </div>
            <div class="input-group">
              <h3>üåê Subdominios descubiertos</h3>
              <table class="subdomains-table">
                <thead>
                  <tr>
                    <th>Subdominio</th>
                    <th>Descripci√≥n</th>
                    <th></th>
                  </tr>
                </thead>
                <tbody id="subdomainsBody_${deviceId}">
                  ${device.subdomains && device.subdomains.length > 0 ? device.subdomains.map(sub => `
                    <tr>
                      <td><input type="text" value="${sanitizeInput(sub.subdomain || '')}" placeholder="ej. sub1.example.com"></td>
                      <td><input type="text" value="${sanitizeInput(sub.description || '')}" placeholder="ej. Servidor web principal"></td>
                      <td><button class="delete-row" onclick="deleteRow(event)">üóëÔ∏è</button></td>
                    </tr>
                  `).join('') : ''}
                </tbody>
              </table>
              <button class="add-button" onclick="addSubdomainRow(${deviceId})">üåê A√±adir Subdominio</button>
            </div>
            <div class="input-group">
              <h3>ü™™ Credenciales obtenidas</h3>
              <table class="creds-table">
                <thead>
                  <tr>
                    <th>Usuario</th>
                    <th>Contrase√±a</th>
                    <th>Token</th>
                    <th>Hash</th>
                    <th></th>
                  </tr>
                </thead>
                <tbody id="credsBody_${deviceId}">
                  ${device.credentials && device.credentials.length > 0 ? device.credentials.map(cred => `
                    <tr>
                      <td><input type="text" value="${sanitizeInput(cred.user || '')}" placeholder="ej. admin"></td>
                      <td><input type="text" value="${sanitizeInput(cred.password || '')}" placeholder="ej. password123"></td>
                      <td><input type="text" value="${sanitizeInput(cred.token || '')}" placeholder="ej. JWT_abc123"></td>
                      <td><input type="text" value="${sanitizeInput(cred.hash || '')}" placeholder="ej. $2a$10$..."></td>
                      <td><button class="delete-row" onclick="deleteRow(event)">üóëÔ∏è</button></td>
                    </tr>
                  `).join('') : ''}
                </tbody>
              </table>
              <button class="add-button" onclick="addCredRow(${deviceId})">ü™™ A√±adir Credencial</button>
            </div>
            <div class="input-group">
              <h3>‚ö†Ô∏è Vulnerabilidades detectadas</h3>
              <table class="vulns-table">
                <thead>
                  <tr>
                    <th>Nombre Vulnerabilidad</th>
                    <th>CVE</th>
                    <th>Descripci√≥n</th>
                    <th></th>
                  </tr>
                </thead>
                <tbody id="vulnsBody_${deviceId}">
                  ${device.vulnerabilities && device.vulnerabilities.length > 0 ? device.vulnerabilities.map(vuln => `
                    <tr>
                      <td><input type="text" value="${sanitizeInput(vuln.name || '')}" placeholder="ej. XSS"></td>
                      <td><input type="text" value="${sanitizeInput(vuln.cve || '')}" placeholder="ej. CVE-2021-1234"></td>
                      <td><input type="text" value="${sanitizeInput(vuln.description || '')}" placeholder="ej. Inyecci√≥n en formulario"></td>
                      <td><button class="delete-row" onclick="deleteRow(event)">üóëÔ∏è</button></td>
                    </tr>
                  `).join('') : ''}
                </tbody>
              </table>
              <button class="add-button" onclick="addVulnRow(${deviceId})">‚ö†Ô∏è A√±adir Vulnerabilidad</button>
            </div>
            <button class="delete-device" onclick="deleteDevice(${deviceId})">üóëÔ∏è Borrar M√°quina</button>
          `;
          container.appendChild(deviceBlock);
          attachDeviceInputListeners(deviceId);
        });

        document.getElementById('notes').value = sanitizeInput(data.notes || '');

        const savedTheme = localStorage.getItem('theme') || 'dark';
        document.getElementById('themeSelector').value = savedTheme;
        document.body.className = savedTheme;
      } catch (e) {
        console.error('Error al cargar datos:', e);
        showError('Error al cargar datos: ' + e.message);
        localStorage.removeItem('pentesterHubData');
      }
    }

    function importData() {
      console.log('Iniciando importData');
      try {
        const fileInput = document.getElementById('importFile');
        console.log('fileInput:', fileInput);
        const file = fileInput.files[0];
        if (!file) {
          showError('Por favor, selecciona un archivo JSON.');
          return;
        }
        const reader = new FileReader();
        reader.onload = function(e) {
          try {
            const data = JSON.parse(e.target.result);
            const errors = validateData(data);
            if (errors.length > 0) {
              showError('Errores en el archivo importado:\n' + errors.join('\n'));
              return;
            }
            localStorage.setItem('pentesterHubData', JSON.stringify(data));
            loadData();
            showError('Datos importados correctamente.');
          } catch (e) {
            console.error('Error al importar JSON:', e);
            showError('Error al importar JSON: ' + e.message);
          }
        };
        reader.readAsText(file);
      } catch (e) {
        console.error('Error en importData:', e);
        showError('Error al importar JSON: ' + e.message);
      }
    }

    function exportData() {
      console.log('Iniciando exportData');
      try {
        const data = collectData();
        if (!data) {
          showError('No se pudieron recolectar los datos. Verifica los campos.');
          return;
        }

        const errors = validateData(data);
        if (errors.length > 0) {
          const errorMessage = 'Se encontraron los siguientes errores en los datos:\n\n' +
                               errors.join('\n') +
                               '\n\n¬øDeseas continuar con la exportaci√≥n?';
          if (!confirm(errorMessage)) {
            return;
          }
        }

        const json = JSON.stringify(data, null, 2);
        const blob = new Blob([json], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'mayuso_enumeration_report.json';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        saveData();
      } catch (e) {
        console.error('Error al exportar JSON:', e);
        showError('Error al exportar JSON: ' + e.message);
      }
    }

    function exportToHTML() {
      console.log('Iniciando exportToHTML');
      try {
        const data = collectData();
        if (!data) {
          showError('No se pudieron recolectar los datos. Verifica los campos.');
          return;
        }

        const errors = validateData(data);
        if (errors.length > 0) {
          const errorMessage = 'Se encontraron los siguientes errores en los datos:\n\n' +
                               errors.join('\n') +
                               '\n\n¬øDeseas continuar con la exportaci√≥n?';
          if (!confirm(errorMessage)) {
            return;
          }
        }

        let htmlContent = `
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ENUMERATION REPORT</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
      background-color: #f4f4f4;
      color: #333;
    }
    .container {
      max-width: 900px;
      margin: 0 auto;
      padding: 20px;
      background-color: #fff;
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      border: 1px solid #CCCCCC;
    }
    h1 {
      color: #B80F11;
      text-align: center;
      font-size: 24px;
    }
    h2 {
      color: #B80F11;
      border-bottom: 2px solid #B80F11;
      padding-bottom: 5px;
      margin-bottom: 10px;
    }
    .section {
      margin: 20px 0;
      padding: 15px;
      background-color: #f9f9f9;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      border: 1px solid #CCCCCC;
    }
    .section p, .section ul {
      margin: 5px 0;
    }
    ul {
      list-style: none;
      padding: 0;
    }
    li {
      padding: 5px 0;
    }
    .device {
      margin-bottom: 20px;
      padding: 15px;
      background-color: #fefefe;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      border: 1px solid #CCCCCC;
    }
    .device h3 {
      color: #B80F11;
      margin-bottom: 10px;
    }
    .notes {
      white-space: pre-wrap;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>üìï ENUMERATION REPORT</h1>
    <div class="section">
      <h2>üíª Entorno</h2>
      <p>IP Privada Propia: ${sanitizeInput(data.preliminaryInfo.ownPrivateIp || 'N/A')}</p>
      <p>IP P√∫blica Propia: ${sanitizeInput(data.preliminaryInfo.ownPublicIp || 'N/A')}</p>
      <p>Nombre de la Red: ${sanitizeInput(data.preliminaryInfo.networkName || 'N/A')}</p>
      <p>Rango de Red: ${sanitizeInput(data.preliminaryInfo.networkRange || 'N/A')}</p>
    </div>
`;

        data.devices.forEach(device => {
          htmlContent += `
    <div class="device">
      <h2>üñ•Ô∏è ${sanitizeInput(device.name || 'N/A')}</h2>
      <p>üíª IP: ${sanitizeInput(device.ip || 'N/A')}</p>
      <p>üåê Dominio: ${sanitizeInput(device.domain || 'N/A')}</p>
      <p>üìç MAC-Address: ${sanitizeInput(device.macAddress || 'N/A')}</p>
      <p>‚öôÔ∏è Sistema Operativo: ${sanitizeInput(device.os || 'N/A')}</p>
      <div class="section">
        <h3>üõë Puertos Abiertos</h3>
        ${device.ports.length > 0 ? `
          <ul>
            ${device.ports.map(port => `
              <li>
                Puerto: ${sanitizeInput(port.port || 'N/A')}<br>
                Protocolo: ${sanitizeInput(port.protocol || 'N/A')}<br>
                Servicio: ${sanitizeInput(port.service || 'N/A')}<br>
                Versi√≥n: ${sanitizeInput(port.version || 'N/A')}
              </li>
            `).join('')}
          </ul>
        ` : '<p>No hay puertos registrados.</p>'}
      </div>
      <div class="section">
        <h3>üåê Subdominios descubiertos</h3>
        ${device.subdomains.length > 0 ? `
          <ul>
            ${device.subdomains.map(sub => `
              <li>
                Subdominio: ${sanitizeInput(sub.subdomain || 'N/A')}<br>
                Descripci√≥n: ${sanitizeInput(sub.description || 'N/A')}
              </li>
            `).join('')}
          </ul>
        ` : '<p>No hay subdominios registrados.</p>'}
      </div>
      <div class="section">
        <h3>ü™™ Credenciales obtenidas</h3>
        ${device.credentials.length > 0 ? `
          <ul>
            ${device.credentials.map(cred => `
              <li>
                Usuario: ${sanitizeInput(cred.user || 'N/A')}<br>
                Contrase√±a: ${sanitizeInput(cred.password || 'N/A')}<br>
                Token: ${sanitizeInput(cred.token || 'N/A')}<br>
                Hash: ${sanitizeInput(cred.hash || 'N/A')}
              </li>
            `).join('')}
          </ul>
        ` : '<p>No hay credenciales registradas.</p>'}
      </div>
      <div class="section">
        <h3>‚ö†Ô∏è Vulnerabilidades detectadas</h3>
        ${device.vulnerabilities.length > 0 ? `
          <ul>
            ${device.vulnerabilities.map(vuln => `
              <li>
                Nombre Vulnerabilidad: ${sanitizeInput(vuln.name || 'N/A')}<br>
                CVE: ${sanitizeInput(vuln.cve || 'N/A')}<br>
                Descripci√≥n: ${sanitizeInput(vuln.description || 'N/A')}
              </li>
            `).join('')}
          </ul>
        ` : '<p>No hay vulnerabilidades registradas.</p>'}
      </div>
    </div>
`;
        });

        if (data.notes) {
          htmlContent += `
    <div class="section">
      <h2>üìù Notas Adicionales</h2>
      <p class="notes">${sanitizeInput(data.notes)}</p>
    </div>
`;
        }

        htmlContent += `
  </div>
</body>
</html>
`;

        const blob = new Blob([htmlContent], { type: 'text/html' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'enumeration_report.html';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        saveData();
      } catch (e) {
        console.error('Error al exportar HTML:', e);
        showError('Error al exportar HTML: ' + e.message);
      }
    }

    function clearData() {
      if (confirm('¬øEst√°s seguro de que quieres limpiar todos los datos?')) {
        localStorage.removeItem('pentesterHubData');
        localStorage.removeItem('theme');
        location.reload();
      }
    }

    window.addEventListener('load', () => {
      loadData();
      ['ownPrivateIp', 'ownPublicIp', 'networkName', 'networkRange', 'notes'].forEach(id => {
        const element = document.getElementById(id);
        if (element) element.addEventListener('input', saveData);
      });
      document.querySelectorAll('.device-block').forEach(block => {
        const deviceId = block.dataset.deviceId;
        attachDeviceInputListeners(deviceId);
      });
    });
  </script>
</body>
</html>
